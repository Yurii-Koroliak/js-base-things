// let a = "2";
// let b = "3";
// let c = true;

// // оба операнда преобразованы в числа с помощью унарного плюса
// alert( +a + +b ); // 5
// alert(+c);

// // унарный плюс преобразует любой значение в число работает так же как и Number()


// let d = 1;
// let e = 2;

// let f = 3 - (d = e + d);
// //тут интересно переменной d присвоино звначение уравнение в котором эта переменная плюсуется с другой, из-за того что сначала выполнилось уравнение а потом уже присваивание

// alert( d ); // 3
// alert( f ); // 0




// let q = 1;
// console.log(q); //1

// q += 2;
// console.log(q); //3

// q *= 4;
// console.log(q); //12

// q /=3;
// console.log(q); //4

// q **= 2;
// console.log(q); //16

// q += 'qwerty';
// console.log(q); //16qwerty
// //+= значит что мы присваиваем переменной ее же значение плюс указанный тип данных. Так же и с остальными операторами 


// let w = 2;
// w++;
// console.log(w); //3

// let r = 2;
// r--;
// console.log(r); //2

// // ++ называется Инкремент. -- называется Декремент. Оба работают только на переменную прибавляя/отнимая 1


// // AND(и) ( & )   if (1 & 2) {.........} если 1 и 2 то ...
// // OR(или) ( | )  if (1 | 2) {.........} если 1 ИЛИ 2 то ...
// // NOT(не) ( ~ )  if (a ~ b) {.........} если a НЕ b то ...



// let t = '22';
// let y = '161';
// console.log(t < y); //false

// let u = 'asdf';
// let i = 'zxcv';
// console.log(u > i); //false 

// //получилось false потому что в строковых сравнениях сравнивается только первый символ. С буквами работает так же только в алфавитном порядке. 
// // u > i выдало false потому то что z идет после a.
// // если первый символ строк равен то сравниваются вторые символы.


// let o = 1;
// let p = '1';
// console.log(o == p); //true
// console.log(o === p); //false
// // если сравнивать разные типы то сравнение приведет каждый тип в число.
// // но если мы сравниваем разные типы при помощи строгого равенства будет false
// // так как строгое равенство не приводит типы к числам а сравнивает сначала типы данных а потом их значения.

// let s = 1;
// let g = "1";
// console.log(g !== s) //true
// // так же можно сравнивать строгим равенством !== строго не равно.
// // не равно в js записывается как !=




// // let result = условие ? значение1 : значение2; так можно записать условия if else
// // Смысл оператора «вопросительный знак» ? – вернуть то или иное значение.

// let age = prompt('how old are u?');
// // if (age < 18) {
// //     console.log('u are not old enough');
// // } else {
// //     console.log('u are enough old');
// // }
// age < 18 ? console.log('u are not old enough') : console.log('u are enough old'); // тот же код что и if else только другая структура, тоже интересная.
// //типо спрашивается age < 18 и выполняется значение 1 если true и значение 2 если false.

// age < 18 ? console.log('1') :
// age <= 26 ? console.log('2') :
// age <= 32 ? console.log('3') : 
// console.log('4');
// //тут мы проверяем возраст, проверяется каждое значение по очереди (асинхронно). возраст меньше 18, если да: то 1, если нет то: возраст меньше 26 и тд.
// //в конце мы смотрим возраст больше равно 32, если да то: 3, если нет то: 4.



// let userName = '';
// let secondName = '';
// alert(userName || secondName || 'qwerty' ); // qwerty так как только оно тут True 
// // оператор || значит ИЛИ. он смотрит на каждое значение с лева на право и превращает его в boolean. после этого выдает false если все значения false.
// // либо же если имеется хоть одно True значение он выдаст его  
// // выдает то значени которое True 

// if (0 && 1) {
//     console.log(1234)//эта строка никогда не выполнится так как значение у нас False
// }
// console.log(0 && 1); //0 потому что он наткнулся на значение False и сразу же остановился не смотря дальше
// // оператор И && обозначает что оба действия должны быть True если хоть одно будет False он вернет False
// //выдает то значение которое False и дальше не смотрит. Если все True он выдаст последнее значение

// console.log(!true);
// // оператор ! значит НЕ меняет значение True на False и наоборот.
// // Сначала приводит аргумент к True или False и потом возвращает обратное.



// let h = j ?? k;
// // ?? это оператор двойного слияние он работает таки образром что переменная h будет равняться j только в случае если j не равно null или undefined иначе будет равняться k.
// // работает так же как и let h = (j !== null && j !== undefined) ? j : k

// let userNickName = prompt('what is ur nickname');
// if (userNickName == null && userNickName == undefined) {
//  userNickName = 'anonym';
// }
//  console.log(userNickName);

// // два одинаковых кода но второй проще читается и меньше занимает места

// // let userNickName;
// // console.log(userNickName ?? 'anonym');

// // грубо говоря || и ?? одно и то же но оператор ИЛИ возвращает первое истинное значение а оператор нулевого слияние возвращает первое определенное значение.

// let userAge = 0;
// console.log(userAge || 100) //выведет 100 так как userAge является false
// console.log(userAge ?? 100) //выведет 0 так как userAge не равно null или undefined



// let l = null;
// l ??= 100; //тоесть если значение l равняется null или undefined ему присвоится значение 100. 
// //если бы l имело хоть какое то значение ему бы не присвоилось 100.
// //оператор ??= это оператор нулевого присваивания 
// //оператор нулевого слияния ?? это быстрый способ выбрать первое определенное значение из списка.




// for(let x = 0; x < 5; x++) {
//     console.log(x);
// }
// console.log(x)//не выполнится так как перменная существует только внитри цикла
// тут переменная обьявлена внитри цикла тоесть снаружи она работать и вызываться не будет
//любая часть цикла for может быть пропущена
// break останавливает любой цикл в его теле.







// Function Declaration
// function sayHi() {
//   alert( "Привет" );
// }

// Function Expression
// let sayHi = function() {
//   alert( "Привет" );
// };

// синтаксис function expression создан для того что бы создавать фунцию внутри любого выражения
// в данном примере мысоздали функцию и сразу же поместили ее в переменную поэтому и имя функции не обязательно название функции это просто переменная в которой она находится




// так же можно скопировать функцию например в переменную 
// function getSum (a, b) {
//     return a + b;
// }
// let sum = getSum;
// тут нам не надо писать скобочки после функции так как копируется сама функция. если бы скобки были то в переменную записалось именно результат функции
// console.log(getSum());
// console.log(sum());
// вызыватся та же самая функция только в первом варианте вызывается оригинал функции
// во втором варианте вызывается копия функции которую мы поместили в переменную
// когда мы помещаем функцию в переменную, создается копия функции и грубо говоря теперь у нас две одинаковых функции





// let age = prompt("Сколько Вам лет?", 18);

// if (age < 18) {

//   function welcome() {
//     alert("Привет!");
//   }

// } else {

//   function welcome() {
//     alert("Здравствуйте!");
//   }

// }
// welcome(); 
// этот код не сработате так как функция существует только внитри конструкции if 
// что бы написать этот код и он работал нам надо использовать Function Expression и присвоить значение заранее созданной переменной.

// let age = prompt('how old are u?');
// let welcome;
// if (age < 18) {
//     welcome = function() {
//         console.log('hi')        
//     }
// } else {
//     welcome = function() {
//         console.log('hello')
//     }
// }
// welcome()
// упрощаем теперь
// let age = prompt('how old are u');
// let welcome = (age < 18) ? 
// function() {
//     console.log('hi');
// } : 
// function() {
//     console.log('hello')
// }
// welcome()

// в таком варианте функция существует снаружи так как переменная которой мы присвоили функцию создана вне конструкции

// так же имеются стрелочные функции, это красткий синтаксис Function Expression.
// let age = prompt('how old are u?');
// let welcome = (age < 18) ?
//     () => console.log('hi'):
//     () => console.log("hallo");
// welcome();

// let sum = (a, b) => {
//     let result = (a + b)**2;
//     return result; 
// }
// let firstNumber = +prompt('first number');
// let secondNumber = +prompt('second number');
// console.log(sum(firstNumber, secondNumber));

// Js base course is finished, now I will solve problems with codewars mabey something on lithcode I will look at and move on, there are still a lot of courses and information to come